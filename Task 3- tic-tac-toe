<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Stylish Tic-Tac-Toe</title>
    <style>
      body {
        font-family: "Arial", sans-serif;
        background: linear-gradient(135deg, #237566, #6975ae);
        color: #372b2b;
        text-align: center;
        margin: 0;
        padding: 20px;
      }

      h1 {
        font-size: 3rem;
        color: #fff;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
      }

      #board {
        display: grid;
        grid-template-columns: repeat(3, 120px);
        gap: 10px;
        justify-content: center;
        margin: 20px auto;
      }

      .cell {
        width: 120px;
        height: 120px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.06);
        font-size: 2.5rem;
        font-weight: bold;
        color: #272020;
        cursor: pointer;
        transition: transform 0.2s, background-color 0.2s;
      }

      .cell:hover {
        background-color: #f0f8ff;
        transform: scale(1.1);
      }

      #message {
        margin-top: 20px;
        font-size: 1.5rem;
        color: #fff;
        text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);
      }

      .buttons {
        margin-top: 20px;
      }

      button {
        padding: 10px 20px;
        font-size: 1rem;
        margin: 5px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        background-color: #333;
        color: #fff;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: background-color 0.2s;
      }

      button:hover {
        background-color: #484141;
      }

      .confetti {
        position: fixed;
        width: 10px;
        height: 10px;
        background-color: #973321;
        top: 0;
        left: 50%;
        animation: confetti-fall 3s ease-out forwards;
      }

      @keyframes confetti-fall {
        0% {
          transform: translateY(0) rotate(0);
        }
        100% {
          transform: translateY(100vh) rotate(720deg);
        }
      }

      @media (max-width: 600px) {
        #board {
          grid-template-columns: repeat(3, 90px);
          gap: 8px;
        }

        .cell {
          width: 90px;
          height: 90px;
          font-size: 2rem;
        }

        h1 {
          font-size: 2rem;
        }

        #message {
          font-size: 1.2rem;
        }

        button {
          font-size: 0.9rem;
          padding: 8px 16px;
        }
      }
    </style>
  </head>
  <body>
    <h1>Tic-Tac-Toe</h1>
    <div id="board"></div>
    <p id="message">Player X's Turn</p>
    <div class="buttons">
      <button onclick="resetGame()">Reset</button>
      <button onclick="newGame()">New Game</button>
    </div>
    <div id="celebration"></div>
    <script>
      let board = Array(9).fill("");
      let currentPlayer = "X";
      const winningCombinations = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6],
      ];

      const boardDiv = document.getElementById("board");
      const message = document.getElementById("message");
      const celebrationDiv = document.getElementById("celebration");

      function createBoard() {
        boardDiv.innerHTML = "";
        board.forEach((cell, index) => {
          const cellDiv = document.createElement("div");
          cellDiv.className = "cell";
          cellDiv.textContent = cell;
          cellDiv.onclick = () => makeMove(index);
          boardDiv.appendChild(cellDiv);
        });
      }

      function makeMove(index) {
        if (board[index] || checkWinner()) return;

        board[index] = currentPlayer;
        currentPlayer = currentPlayer === "X" ? "O" : "X";
        const winner = checkWinner();

        if (winner) {
          message.textContent = `${winner} Wins!`;
          triggerCelebration();
        } else if (board.every((cell) => cell)) {
          message.textContent = "It's a Draw!";
        } else {
          message.textContent = `Player ${currentPlayer}'s Turn`;
        }

        createBoard();
      }

      function checkWinner() {
        for (const combo of winningCombinations) {
          const [a, b, c] = combo;
          if (board[a] && board[a] === board[b] && board[a] === board[c]) {
            return board[a];
          }
        }
        return null;
      }

      function resetGame() {
        board = board.map((cell) => "");
        message.textContent = `Player ${currentPlayer}'s Turn`;
        createBoard();
      }

      function newGame() {
        board = Array(9).fill("");
        currentPlayer = "X";
        message.textContent = "Player X's Turn";
        createBoard();
      }

      function triggerCelebration() {
        for (let i = 0; i < 50; i++) {
          const confetti = document.createElement("div");
          confetti.className = "confetti";
          confetti.style.left = `${Math.random() * 100}%`;
          confetti.style.backgroundColor = `hsl(${
            Math.random() * 360
          }, 70%, 50%)`;
          celebrationDiv.appendChild(confetti);
          setTimeout(() => confetti.remove(), 3000);
        }
      }

      createBoard();
    </script>
  </body>
</html>
